name: deploy function reusable workflow

on:
  workflow_call:
    inputs:
      function-name:
        type: string
        required: true
      version:
        type: string
        required: false
        default: "0.0.0"
    secrets: 
      appwrite-endpoint:
        required: true
      appwrite-project:
        required: true
      appwrite-apikey:
        required: true
      function-apikey:
        required: true
      github-token:
        required: true

env:
  APPWRITE_PROJECT: ${{ secrets.appwrite-project }}
  APPWRITE_APIKEY: ${{ secrets.appwrite-apikey }}
  APPWRITE_ENDPOINT: ${{ secrets.appwrite-endpoint }}
  APPWRITE_FUNCTION_NAME: ${{ inputs.function-name }}
  APPWRITE_FUNCTION_APIKEY: ${{ secrets.function-apikey }}

jobs:

  list-collections:
    name: list collections
    runs-on: self-hosted

    outputs:
      collections: ${{ steps.list-collections.outputs.collections }}

    steps:
      - name: checkout infra
        uses: actions/checkout@v2
        with:
          ref: list-collections
          repository: miele-nl/nl.minelle.concordia.sheetmusic.infra
          path: './infra'
          token: ${{ secrets.github-token }} 
      
      - name: list all collections
        id: list-collections
        run: |
          cd infra/.scripts
          . list_collections.sh 100
          collections=$(cat _list_collections.txt)
          matrix=$(echo $collections |  jq --compact-output  '[ .[] |  {
            name: .name,
            id: ."$id"
            } ]')
          echo "::set-output name=collections::{ \"collections\": $matrix }"
          echo $matrix

  environment:
    name: set environment
    runs-on: self-hosted
    needs:
      - list-collections

    strategy:
      fail-fast: true
      matrix: ${{ fromJson(needs.list-collections.outputs.collections) }}

    steps: 
      - name: set environment variable
        run: |
            collectionName=${{ matrix.collections.name }}
            collectionId=${{ matrix.collections.id }}
            # collectionId=$(echo ${{ matrix.collections }} | jq -r '.id')

            varname=$(echo "collection_$collectionName" | tr [:lower:] [:upper:])
            cmd=$(echo "export $varname=$collectionId")
            echo $cmd
            eval $cmd
            
  infra:
    name: deploy function infra
    runs-on: self-hosted

    needs:
      - environment

    outputs:
      functionId: ${{ steps.get-function-id.outputs.functionId }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: checkout repo
        uses: actions/checkout@v2
        with:
          path: './artifacts'
      - name: checkout infra
        uses: actions/checkout@v2
        with:
          repository: miele-nl/nl.minelle.concordia.sheetmusic.infra
          path: './infra'
          token: ${{ secrets.github-token }} 

      - name: get function id
        id: get-function-id
        run: |
          cd infra/.scripts
          . get_function_id.sh "${{ env.APPWRITE_FUNCTION_NAME }}"
          functionId=$(cat _get_function_id.txt)
          echo "::set-output name=functionId::$functionId"

      - name: fail if function does not exist
        id: fail-if-not-found
        if: ${{ steps.get-function-id.outputs.functionId == '' }}
        run: exit 1

      - name: update function
        id: update-function
        if: ${{ steps.get-function-id.outputs.functionId != '' }}
        run: |
          cd infra/.scripts
          . update_function.sh \
            "${{ env.APPWRITE_FUNCTION_NAME }}" \
            "${{ steps.get-function-id.outputs.functionId }}" \
            "$GITHUB_WORKSPACE/artifacts/.ci/function.json"

  build:
    name: build and upload code    
    runs-on: self-hosted

    needs:
      - infra

    outputs: 
      tagId: ${{ steps.create-tag.outputs.tagId }}

    steps:
      - name: checkout repo
        uses: actions/checkout@v2
        with:
          path: './artifacts'

      - name: checkout infra
        uses: actions/checkout@v2
        with:
          repository: miele-nl/nl.minelle.concordia.sheetmusic.infra
          path: './infra'
          token: ${{ secrets.github-token }} 
        
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16.x

      - name: build
        id: build
        env:
          CI: true  
        run: |
          npm install -g bundle-deps

          cd artifacts/
          npm ci --include dev
          npm test

          pkgName=$(npm pkg get name | tr -d '"')
          echo $pkgName
          echo "version: ${{ inputs.version }}"
          npm pkg set version="${{ inputs.version }}"

          bundle-deps
          json=$(npm pack)
          tgzFile=$(echo $json | grep "^$pkgName.*\.tgz")
          codeFile=${tgzFile%.tgz}.tar.gz

          mv -- "$tgzFile" "$codeFile"

          echo "package created: $codeFile"
          echo "::set-output name=codeFile::$codeFile"

      - name: create tag
        id: create-tag
        run: |
          cd infra/.scripts
          . create_tag.sh \
            "${{ needs.infra.outputs.functionId }}" \
            "${{ steps.build.outputs.codeFile }}" \
            ".ci/tag.json" \
            "$GITHUB_WORKSPACE/artifacts/"
          functionId=$(cat _create_tag.txt)
          echo "::set-output name=tagId::$tagId"

      - name: check
        run: | 
          echo "tagId: ${{ steps.create-tag.outputs.tagId }}"

  deploy:
    name: update tag    
    runs-on: self-hosted

    needs:
      - infra
      - build

    steps:

      - name: checkout infra
        uses: actions/checkout@v2
        with:
          repository: miele-nl/nl.minelle.concordia.sheetmusic.infra
          path: './infra'
          token: ${{ secrets.github-token }} 
        
      - name: deploy tag
        id: deploy-tag
        run: |
          cd infra/.scripts
          . update_function_tag.sh \
            "${{ needs.infra.outputs.functionId }}" \
            "${{ needs.build.outputs.tagId }}"


