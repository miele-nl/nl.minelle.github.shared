name: cache collection ids

on:
  workflow_call:
    inputs:
      infra-repository:
        required: true
        type: string
      infra-repository-branch:
        required: false
        type: string
        default: main
      github-api-url:
        type: string
        required: true
      github-actor:
        type: string
        required: true
    secrets: 
      appwrite-endpoint:
        required: true
      appwrite-project:
        required: true
      appwrite-apikey:
        required: true
      github-token:
        required: true

env:
  APPWRITE_PROJECT: ${{ secrets.appwrite-project }}
  APPWRITE_APIKEY: ${{ secrets.appwrite-apikey }}
  APPWRITE_ENDPOINT: ${{ secrets.appwrite-endpoint }}

jobs:
  build-cache:
    # first create all empty collections, because document type rules must reference a collection ID
    name: cache 
    runs-on: self-hosted

    steps:
      - name: checkout infra
        uses: actions/checkout@v2
        with:
          ref: ${{ inputs.infra-repository-branch }}
          repository: ${{ inputs.infra-repository }}
          path: './infra'
          token: ${{ secrets.github-token }} 

      - name: get latest commit
        id: latest-commit
        run: |
          cd infra/.scripts
          . get_latest_commit.sh \
              "${{ inputs.github-api-url }}" \
              "${{ inputs.infra-repository }}" \
              "${{ inputs.infra-repository-branch }}" \
              "${{ inputs.github-actor }}" \
              "${{ secrets.github-token }}" 
          commit=$(cat _get_latest_commit.txt)
          echo $commit
          echo "::set-output name=commit::$commit"

      - name: use cache
        id: use-cache
        uses: actions/cache@v2
        with:
          path: ~/.appwrite/cache
          key: ${{ secrets.appwrite-project }}-${{ steps.latest-commit.outputs.commit }}

      - name: build cache collections
        id: build-cache-collections
        if: steps.use-cache.outputs.cache-hit != 'true'

        run: |
          [ -d ~/.appwrite/cache ] || mkdir -p ~/.appwrite/cache
          cd infra/.scripts
          . list_collections.sh 100
          collections=$(cat _list_collections.txt)
          cp _list_collections.txt ~/.appwrite/cache/collections.json
          variables=$(echo $collections | jq '[ .[] | { key: "collection_\(.name)", value: ."$id" }]')
          . prepare_env.sh "$variables"
          cp _prepare_env.txt ~/.appwrite/cache/env_collections.sh

      - name: build cache functions
        id: build-cache-functions
        if: steps.use-cache.outputs.cache-hit != 'true'

        run: |
          [ -d ~/.appwrite/cache ] || mkdir -p ~/.appwrite/cache
          cd infra/.scripts
          . list_functions.sh 100
          functions=$(cat _list_functions.txt)
          cp _list_functions.txt ~/.appwrite/cache/functions.json
          variables=$(echo $functions | jq '[ .[] | { key: "function_\(.name)", value: ."$id" }]')
          . prepare_env.sh "$variables"
          cp _prepare_env.txt ~/.appwrite/cache/env_functions.sh
